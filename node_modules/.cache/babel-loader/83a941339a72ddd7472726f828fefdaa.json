{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadCountries = createAsyncThunk('@@countries/load-countries', async (_, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    },\n    rejectWithValue\n  } = _ref;\n\n  try {\n    return client.get(api.ALL_COUNTRIES);\n  } catch (err) {\n    if (err instanceof Error) return rejectWithValue(err.message);\n    return rejectWithValue(\"Unknown error\");\n  }\n}, {\n  condition: (_, _ref2) => {\n    let {\n      getState\n    } = _ref2;\n    const {\n      countries: {\n        status\n      }\n    } = getState();\n\n    if (status === 'loading') {\n      return false;\n    }\n  }\n});\nconst initialState = {\n  status: 'idle',\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: '@@countries',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadCountries.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loadCountries.rejected, (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload || \"Cannot load\";\n    }).addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = 'received';\n      state.list = action.payload.data;\n    });\n  }\n});\nexport const countryReducer = countrySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loadCountries","_","extra","client","api","rejectWithValue","get","ALL_COUNTRIES","err","Error","message","condition","getState","countries","status","initialState","error","list","countrySlice","name","reducers","extraReducers","builder","addCase","pending","state","rejected","action","payload","fulfilled","data","countryReducer","reducer"],"sources":["/Users/vladimirvihlaev/Desktop/code/ts-course/ts-course-proj3-redux/src/features/countries/countries-slice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, isRejectedWithValue } from '@reduxjs/toolkit';\nimport { Country, Extra, Status } from 'types';\n\ntype CountrySlice = {\n    status: Status\n    error: string | null\n    list: Country[]\n}\n\nexport const loadCountries = createAsyncThunk<\n    { data: Country[]},\n    undefined,\n    {\n        state: { countries: CountrySlice},\n        extra: Extra,\n        rejectValue: string,\n    }\n>(\n  '@@countries/load-countries',\n  async (_, {\n    extra: {client, api},\n    rejectWithValue\n  }) => {\n    try {\n        return client.get(api.ALL_COUNTRIES)\n    } catch (err) {\n        if (err instanceof Error)\n            return rejectWithValue(err.message)\n        return rejectWithValue(\"Unknown error\")\n    }\n  },\n  {\n    condition: (_, { getState }) => {\n      const { countries: { status } } = getState();\n\n      if (status === 'loading') {\n        return false;\n      }\n    }\n  }\n);\n\nconst initialState: CountrySlice = {\n  status: 'idle',\n  error: null,\n  list: [],\n}\n\nconst countrySlice = createSlice({\n  name: '@@countries',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadCountries.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(loadCountries.rejected, (state, action) => {\n        state.status = 'rejected';\n        state.error = action.payload || \"Cannot load\";\n      })\n      .addCase(loadCountries.fulfilled, (state, action) => {\n        state.status = 'received';\n        state.list = action.payload.data;\n      })\n  }\n})\n\nexport const countryReducer = countrySlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAAmE,kBAAnE;AASA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAS3C,4BAT2C,EAU3C,OAAOG,CAAP,WAGM;EAAA,IAHI;IACRC,KAAK,EAAE;MAACC,MAAD;MAASC;IAAT,CADC;IAERC;EAFQ,CAGJ;;EACJ,IAAI;IACA,OAAOF,MAAM,CAACG,GAAP,CAAWF,GAAG,CAACG,aAAf,CAAP;EACH,CAFD,CAEE,OAAOC,GAAP,EAAY;IACV,IAAIA,GAAG,YAAYC,KAAnB,EACI,OAAOJ,eAAe,CAACG,GAAG,CAACE,OAAL,CAAtB;IACJ,OAAOL,eAAe,CAAC,eAAD,CAAtB;EACH;AACF,CArB0C,EAsB3C;EACEM,SAAS,EAAE,CAACV,CAAD,YAAqB;IAAA,IAAjB;MAAEW;IAAF,CAAiB;IAC9B,MAAM;MAAEC,SAAS,EAAE;QAAEC;MAAF;IAAb,IAA4BF,QAAQ,EAA1C;;IAEA,IAAIE,MAAM,KAAK,SAAf,EAA0B;MACxB,OAAO,KAAP;IACD;EACF;AAPH,CAtB2C,CAAtC;AAiCP,MAAMC,YAA0B,GAAG;EACjCD,MAAM,EAAE,MADyB;EAEjCE,KAAK,EAAE,IAF0B;EAGjCC,IAAI,EAAE;AAH2B,CAAnC;AAMA,MAAMC,YAAY,GAAGnB,WAAW,CAAC;EAC/BoB,IAAI,EAAE,aADyB;EAE/BJ,YAF+B;EAG/BK,QAAQ,EAAE,EAHqB;EAI/BC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWvB,aAAa,CAACwB,OADzB,EACmCC,KAAD,IAAW;MACzCA,KAAK,CAACX,MAAN,GAAe,SAAf;MACAW,KAAK,CAACT,KAAN,GAAc,IAAd;IACD,CAJH,EAKGO,OALH,CAKWvB,aAAa,CAAC0B,QALzB,EAKmC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAClDF,KAAK,CAACX,MAAN,GAAe,UAAf;MACAW,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAAP,IAAkB,aAAhC;IACD,CARH,EASGL,OATH,CASWvB,aAAa,CAAC6B,SATzB,EASoC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MACnDF,KAAK,CAACX,MAAN,GAAe,UAAf;MACAW,KAAK,CAACR,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeE,IAA5B;IACD,CAZH;EAaD;AAlB8B,CAAD,CAAhC;AAqBA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAApC"},"metadata":{},"sourceType":"module"}