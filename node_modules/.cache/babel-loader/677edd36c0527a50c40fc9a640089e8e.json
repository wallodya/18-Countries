{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadCountries = createAsyncThunk('@@countries/load-countries', (_, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref;\n  return client.get(api.ALL_COUNTRIES);\n}, {\n  condition: (_, _ref2) => {\n    let {\n      getState\n    } = _ref2;\n    const {\n      countries: {\n        status\n      }\n    } = getState();\n\n    if (status === 'loading') {\n      return false;\n    }\n  }\n});\nconst initialState = {\n  status: 'idle',\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: '@@countries',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadCountries.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loadCountries.rejected, (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload || action.meta.error;\n    }).addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = 'received';\n      state.list = action.payload.data;\n    });\n  }\n});\nexport const countryReducer = countrySlice.reducer; // selectors\n\nexport const selectCountriesInfo = state => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n});\nexport const selectAllCountries = state => state.countries.list;\nexport const selectVisibleCountries = (state, _ref3) => {\n  let {\n    search = '',\n    region = ''\n  } = _ref3;\n  return state.countries.list.filter(country => country.name.toLowerCase().includes(search.toLowerCase()) && country.region.includes(region));\n};","map":{"version":3,"names":["createAsyncThunk","createSlice","loadCountries","_","extra","client","api","get","ALL_COUNTRIES","condition","getState","countries","status","initialState","error","list","countrySlice","name","reducers","extraReducers","builder","addCase","pending","state","rejected","action","payload","meta","fulfilled","data","countryReducer","reducer","selectCountriesInfo","qty","length","selectAllCountries","selectVisibleCountries","search","region","filter","country","toLowerCase","includes"],"sources":["/Users/vladimirvihlaev/Desktop/code/ts-course/ts-course-proj3-redux/src/features/countries/countries-slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadCountries = createAsyncThunk(\n  '@@countries/load-countries',\n  (_, {\n    extra: {client, api},\n  }) => {\n    return client.get(api.ALL_COUNTRIES)\n  },\n  {\n    condition: (_, { getState }) => {\n      const { countries: { status } } = getState();\n\n      if (status === 'loading') {\n        return false;\n      }\n    }\n  }\n);\n\nconst initialState = {\n  status: 'idle',\n  error: null,\n  list: [],\n}\n\nconst countrySlice = createSlice({\n  name: '@@countries',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadCountries.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(loadCountries.rejected, (state, action) => {\n        state.status = 'rejected';\n        state.error = action.payload || action.meta.error;\n      })\n      .addCase(loadCountries.fulfilled, (state, action) => {\n        state.status = 'received';\n        state.list = action.payload.data;\n      })\n  }\n})\n\nexport const countryReducer = countrySlice.reducer;\n\n// selectors\nexport const selectCountriesInfo = (state) => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n})\n\nexport const selectAllCountries = (state) => state.countries.list;\nexport const selectVisibleCountries = (state, {search = '', region = ''}) => {\n  return state.countries.list.filter(\n    country => (\n      country.name.toLowerCase().includes(search.toLowerCase()) && country.region.includes(region)\n    )\n  )\n}\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,4BAD2C,EAE3C,CAACG,CAAD,WAEM;EAAA,IAFF;IACFC,KAAK,EAAE;MAACC,MAAD;MAASC;IAAT;EADL,CAEE;EACJ,OAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,aAAf,CAAP;AACD,CAN0C,EAO3C;EACEC,SAAS,EAAE,CAACN,CAAD,YAAqB;IAAA,IAAjB;MAAEO;IAAF,CAAiB;IAC9B,MAAM;MAAEC,SAAS,EAAE;QAAEC;MAAF;IAAb,IAA4BF,QAAQ,EAA1C;;IAEA,IAAIE,MAAM,KAAK,SAAf,EAA0B;MACxB,OAAO,KAAP;IACD;EACF;AAPH,CAP2C,CAAtC;AAkBP,MAAMC,YAAY,GAAG;EACnBD,MAAM,EAAE,MADW;EAEnBE,KAAK,EAAE,IAFY;EAGnBC,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMC,YAAY,GAAGf,WAAW,CAAC;EAC/BgB,IAAI,EAAE,aADyB;EAE/BJ,YAF+B;EAG/BK,QAAQ,EAAE,EAHqB;EAI/BC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWnB,aAAa,CAACoB,OADzB,EACmCC,KAAD,IAAW;MACzCA,KAAK,CAACX,MAAN,GAAe,SAAf;MACAW,KAAK,CAACT,KAAN,GAAc,IAAd;IACD,CAJH,EAKGO,OALH,CAKWnB,aAAa,CAACsB,QALzB,EAKmC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAClDF,KAAK,CAACX,MAAN,GAAe,UAAf;MACAW,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACE,IAAP,CAAYb,KAA5C;IACD,CARH,EASGO,OATH,CASWnB,aAAa,CAAC0B,SATzB,EASoC,CAACL,KAAD,EAAQE,MAAR,KAAmB;MACnDF,KAAK,CAACX,MAAN,GAAe,UAAf;MACAW,KAAK,CAACR,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeG,IAA5B;IACD,CAZH;EAaD;AAlB8B,CAAD,CAAhC;AAqBA,OAAO,MAAMC,cAAc,GAAGd,YAAY,CAACe,OAApC,C,CAEP;;AACA,OAAO,MAAMC,mBAAmB,GAAIT,KAAD,KAAY;EAC7CX,MAAM,EAAEW,KAAK,CAACZ,SAAN,CAAgBC,MADqB;EAE7CE,KAAK,EAAES,KAAK,CAACZ,SAAN,CAAgBG,KAFsB;EAG7CmB,GAAG,EAAEV,KAAK,CAACZ,SAAN,CAAgBI,IAAhB,CAAqBmB;AAHmB,CAAZ,CAA5B;AAMP,OAAO,MAAMC,kBAAkB,GAAIZ,KAAD,IAAWA,KAAK,CAACZ,SAAN,CAAgBI,IAAtD;AACP,OAAO,MAAMqB,sBAAsB,GAAG,CAACb,KAAD,YAAuC;EAAA,IAA/B;IAACc,MAAM,GAAG,EAAV;IAAcC,MAAM,GAAG;EAAvB,CAA+B;EAC3E,OAAOf,KAAK,CAACZ,SAAN,CAAgBI,IAAhB,CAAqBwB,MAArB,CACLC,OAAO,IACLA,OAAO,CAACvB,IAAR,CAAawB,WAAb,GAA2BC,QAA3B,CAAoCL,MAAM,CAACI,WAAP,EAApC,KAA6DD,OAAO,CAACF,MAAR,CAAeI,QAAf,CAAwBJ,MAAxB,CAF1D,CAAP;AAKD,CANM"},"metadata":{},"sourceType":"module"}