{"ast":null,"code":"var _jsxFileName = \"/Users/vladimirvihlaev/Desktop/code/ts-course/ts-course-proj3-redux/src/features/countries/CountryList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useNavigate } from 'react-router-dom';\nimport { List } from '../../components/List';\nimport { Card } from '../../components/Card';\nimport { useCountries } from './use-countries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CountryList = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [countries, {\n    error,\n    status\n  }] = useCountries();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Can't fetch data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this), status === 'loading' && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 32\n    }, this), status === 'received' && /*#__PURE__*/_jsxDEV(List, {\n      children: countries.map(c => {\n        const countryInfo = {\n          img: c.flags.png,\n          name: c.name,\n          info: [{\n            title: 'Population',\n            description: c.population.toLocaleString()\n          }, {\n            title: 'Region',\n            description: c.region\n          }, {\n            title: 'Capital',\n            description: c.capital\n          }]\n        };\n        return /*#__PURE__*/_jsxDEV(Card, {\n          onClick: () => navigate(`/country/${c.name}`),\n          ...countryInfo\n        }, c.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CountryList, \"9/ksSRxLOCUclxgAwgNnBO0QAj8=\", false, function () {\n  return [useNavigate, useCountries];\n});\n\n_c = CountryList;\nexport { CountryList };\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["useNavigate","List","Card","useCountries","CountryList","navigate","countries","error","status","map","c","countryInfo","img","flags","png","name","info","title","description","population","toLocaleString","region","capital"],"sources":["/Users/vladimirvihlaev/Desktop/code/ts-course/ts-course-proj3-redux/src/features/countries/CountryList.jsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\n\nimport { List } from '../../components/List';\nimport { Card } from '../../components/Card';\nimport { useCountries } from './use-countries';\n\n\nconst CountryList = () => {\n  const navigate = useNavigate();\n\n  const [countries, {error, status}] = useCountries();\n\n  return (\n    <>\n      {error && <h2>Can't fetch data</h2>}\n      {status === 'loading' && <h2>Loading...</h2>}\n\n      {status === 'received' && (\n      <List>\n        {countries.map((c) => {\n          const countryInfo = {\n            img: c.flags.png,\n            name: c.name,\n            info: [\n              {\n                title: 'Population',\n                description: c.population.toLocaleString(),\n              },\n              {\n                title: 'Region',\n                description: c.region,\n              },\n              {\n                title: 'Capital',\n                description: c.capital,\n              },\n            ],\n          };\n\n          return (\n            <Card\n              key={c.name}\n              onClick={() => navigate(`/country/${c.name}`)}\n              {...countryInfo}\n            />\n          );\n        })}\n      </List>\n      )}\n    </>\n  )\n}\n\nexport {CountryList};\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,YAAT,QAA6B,iBAA7B;;;;AAGA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;EAEA,MAAM,CAACM,SAAD,EAAY;IAACC,KAAD;IAAQC;EAAR,CAAZ,IAA+BL,YAAY,EAAjD;EAEA,oBACE;IAAA,WACGI,KAAK,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADZ,EAEGC,MAAM,KAAK,SAAX,iBAAwB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAF3B,EAIGA,MAAM,KAAK,UAAX,iBACD,QAAC,IAAD;MAAA,UACGF,SAAS,CAACG,GAAV,CAAeC,CAAD,IAAO;QACpB,MAAMC,WAAW,GAAG;UAClBC,GAAG,EAAEF,CAAC,CAACG,KAAF,CAAQC,GADK;UAElBC,IAAI,EAAEL,CAAC,CAACK,IAFU;UAGlBC,IAAI,EAAE,CACJ;YACEC,KAAK,EAAE,YADT;YAEEC,WAAW,EAAER,CAAC,CAACS,UAAF,CAAaC,cAAb;UAFf,CADI,EAKJ;YACEH,KAAK,EAAE,QADT;YAEEC,WAAW,EAAER,CAAC,CAACW;UAFjB,CALI,EASJ;YACEJ,KAAK,EAAE,SADT;YAEEC,WAAW,EAAER,CAAC,CAACY;UAFjB,CATI;QAHY,CAApB;QAmBA,oBACE,QAAC,IAAD;UAEE,OAAO,EAAE,MAAMjB,QAAQ,CAAE,YAAWK,CAAC,CAACK,IAAK,EAApB,CAFzB;UAAA,GAGMJ;QAHN,GACOD,CAAC,CAACK,IADT;UAAA;UAAA;UAAA;QAAA,QADF;MAOD,CA3BA;IADH;MAAA;MAAA;MAAA;IAAA,QALF;EAAA,gBADF;AAuCD,CA5CD;;GAAMX,W;UACaJ,W,EAEoBG,Y;;;KAHjCC,W;AA8CN,SAAQA,WAAR"},"metadata":{},"sourceType":"module"}