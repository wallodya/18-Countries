{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadCountryByName = createAsyncThunk('@@details/load-country-by-name', (name, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref;\n  return client.get(api.searchByCountry(name));\n});\nexport const loadNeighborsByBorder = createAsyncThunk('@@details/load-neighbors', (borders, _ref2) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref2;\n  return client.get(api.filterByCode(borders));\n});\nconst initialState = {\n  currentCountry: null,\n  neighbors: [],\n  status: 'idle',\n  error: null\n};\nconst detailsSlice = createSlice({\n  name: '@@details',\n  initialState,\n  reducers: {\n    clearDetails: () => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCountryByName.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loadCountryByName.rejected, (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload || action.meta.error;\n    }).addCase(loadCountryByName.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.currentCountry = action.payload.data[0];\n    }).addCase(loadNeighborsByBorder.fulfilled, (state, action) => {\n      state.neighbors = action.payload.data.map(country => country.name);\n    });\n  }\n});\nexport const {\n  clearDetails\n} = detailsSlice.actions;\nexport const detailsReducer = detailsSlice.reducer; // selectors\n\nexport const selectCurrentCountry = state => state.details.currentCountry;\nexport const selectDetails = state => state.details;\nexport const selectNeighbors = state => state.details.neighbors;","map":{"version":3,"names":["createAsyncThunk","createSlice","loadCountryByName","name","extra","client","api","get","searchByCountry","loadNeighborsByBorder","borders","filterByCode","initialState","currentCountry","neighbors","status","error","detailsSlice","reducers","clearDetails","extraReducers","builder","addCase","pending","state","rejected","action","payload","meta","fulfilled","data","map","country","actions","detailsReducer","reducer","selectCurrentCountry","details","selectDetails","selectNeighbors"],"sources":["/Users/vladimirvihlaev/Desktop/code/ts-course/ts-course-proj3-redux/src/features/details/details-slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadCountryByName = createAsyncThunk(\n  '@@details/load-country-by-name',\n  (name, {extra: {client, api}}) => {\n    return client.get(api.searchByCountry(name));\n  }\n);\nexport const loadNeighborsByBorder = createAsyncThunk(\n  '@@details/load-neighbors',\n  (borders, {extra: {client, api}}) => {\n    return client.get(api.filterByCode(borders));\n  }\n);\n\nconst initialState = {\n  currentCountry: null,\n  neighbors: [],\n  status: 'idle',\n  error: null,\n}\n\nconst detailsSlice = createSlice({\n  name: '@@details',\n  initialState,\n  reducers: {\n    clearDetails: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadCountryByName.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(loadCountryByName.rejected, (state, action) => {\n        state.status = 'rejected';\n        state.error = action.payload || action.meta.error;\n      })\n      .addCase(loadCountryByName.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.currentCountry = action.payload.data[0];\n      })\n      .addCase(loadNeighborsByBorder.fulfilled, (state, action) => {\n        state.neighbors = action.payload.data.map(country => country.name);\n      })\n  }\n});\n\nexport const {clearDetails} = detailsSlice.actions;\nexport const detailsReducer = detailsSlice.reducer;\n\n\n// selectors\nexport const selectCurrentCountry = (state) => state.details.currentCountry;\nexport const selectDetails = (state) => state.details;\nexport const selectNeighbors = (state) => state.details.neighbors;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAC/C,gCAD+C,EAE/C,CAACG,IAAD,WAAkC;EAAA,IAA3B;IAACC,KAAK,EAAE;MAACC,MAAD;MAASC;IAAT;EAAR,CAA2B;EAChC,OAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,eAAJ,CAAoBL,IAApB,CAAX,CAAP;AACD,CAJ8C,CAA1C;AAMP,OAAO,MAAMM,qBAAqB,GAAGT,gBAAgB,CACnD,0BADmD,EAEnD,CAACU,OAAD,YAAqC;EAAA,IAA3B;IAACN,KAAK,EAAE;MAACC,MAAD;MAASC;IAAT;EAAR,CAA2B;EACnC,OAAOD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACK,YAAJ,CAAiBD,OAAjB,CAAX,CAAP;AACD,CAJkD,CAA9C;AAOP,MAAME,YAAY,GAAG;EACnBC,cAAc,EAAE,IADG;EAEnBC,SAAS,EAAE,EAFQ;EAGnBC,MAAM,EAAE,MAHW;EAInBC,KAAK,EAAE;AAJY,CAArB;AAOA,MAAMC,YAAY,GAAGhB,WAAW,CAAC;EAC/BE,IAAI,EAAE,WADyB;EAE/BS,YAF+B;EAG/BM,QAAQ,EAAE;IACRC,YAAY,EAAE,MAAMP;EADZ,CAHqB;EAM/BQ,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWpB,iBAAiB,CAACqB,OAD7B,EACuCC,KAAD,IAAW;MAC7CA,KAAK,CAACT,MAAN,GAAe,SAAf;MACAS,KAAK,CAACR,KAAN,GAAc,IAAd;IACD,CAJH,EAKGM,OALH,CAKWpB,iBAAiB,CAACuB,QAL7B,EAKuC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACtDF,KAAK,CAACT,MAAN,GAAe,UAAf;MACAS,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACE,IAAP,CAAYZ,KAA5C;IACD,CARH,EASGM,OATH,CASWpB,iBAAiB,CAAC2B,SAT7B,EASwC,CAACL,KAAD,EAAQE,MAAR,KAAmB;MACvDF,KAAK,CAACT,MAAN,GAAe,MAAf;MACAS,KAAK,CAACX,cAAN,GAAuBa,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoB,CAApB,CAAvB;IACD,CAZH,EAaGR,OAbH,CAaWb,qBAAqB,CAACoB,SAbjC,EAa4C,CAACL,KAAD,EAAQE,MAAR,KAAmB;MAC3DF,KAAK,CAACV,SAAN,GAAkBY,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoBC,GAApB,CAAwBC,OAAO,IAAIA,OAAO,CAAC7B,IAA3C,CAAlB;IACD,CAfH;EAgBD;AAvB8B,CAAD,CAAhC;AA0BA,OAAO,MAAM;EAACgB;AAAD,IAAiBF,YAAY,CAACgB,OAApC;AACP,OAAO,MAAMC,cAAc,GAAGjB,YAAY,CAACkB,OAApC,C,CAGP;;AACA,OAAO,MAAMC,oBAAoB,GAAIZ,KAAD,IAAWA,KAAK,CAACa,OAAN,CAAcxB,cAAtD;AACP,OAAO,MAAMyB,aAAa,GAAId,KAAD,IAAWA,KAAK,CAACa,OAAvC;AACP,OAAO,MAAME,eAAe,GAAIf,KAAD,IAAWA,KAAK,CAACa,OAAN,CAAcvB,SAAjD"},"metadata":{},"sourceType":"module"}